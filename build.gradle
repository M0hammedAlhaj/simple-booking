plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '9.22.0'
    id'org.sonarqube' version "6.3.1.5724"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'
description = 'booking-system'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.zonky.test:embedded-database-spring-test:2.5.1'
    testImplementation 'io.zonky.test:embedded-postgres:2.0.7'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation 'org.testcontainers:postgresql:1.19.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

tasks.jacocoTestCoverageVerification {
    mustRunAfter test
    executionData(fileTree(buildDir).include(
            "jacoco/test.exec",
            "jacoco/test.exec.gz",
            "jacoco/test.exec*"
    ))
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

tasks.check.dependsOn jacocoTestCoverageVerification

flyway {
    url = System.getenv('SPRING_DATASOURCE_URL')
    user = System.getenv('SPRING_DATASOURCE_USERNAME')
    password = System.getenv('SPRING_DATASOURCE_PASSWORD')
    schemas = ['booking']
    defaultSchema = 'booking'
}

sonarqube {
    properties {
        property "sonar.host.url", System.getenv("SONAR_HOST_URL")
        property "sonar.token", System.getenv("SONAR_TOKEN")
        property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
        property "sonar.projectName", System.getenv("SONAR_PROJECT_NAME")
        property "sonar.projectVersion", System.getenv("SONAR_PROJECT_VERSION")
        property "sonar.qualitygate.wait", "true"
        property"sonar.exclusions","**/*.sql,**/*.pls"
    }
}
